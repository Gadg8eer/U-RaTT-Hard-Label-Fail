grf {
	grfid: "UFI\86";
	name: string(STR_GRF_NAME_SUBWAY);
	desc: string(STR_GRF_DESCRIPTION_SUBWAY);
	url:  string(STR_GRF_URL);
	version: 1;
	min_compatible_version: 0;
			param 0 {
        param_gui {
            type: int;
            name: string(STR_PARAM_GUI_NAME);
            desc: string(STR_PARAM_GUI_DESC);
			min_value: 0;
			max_value: 2;
            def_value: 0;
           names: {
					0: string(STR_PARAM_GUI_0);
					1: string(STR_PARAM_GUI_1);
                    2: string(STR_PARAM_GUI_2);
                    };
				}
			}
			param 1 {
		param_NAA3_speed {
			type: int;
			name: string(STR_PARAM_NAA3_SPEED_NAME);
			desc: string(STR_PARAM_NAA3_SPEED_DESC);
			min_value: 29;
			max_value: 255;
			def_value: 61;
			names: {
				29: string(STR_STRING_UNLIMITED);
					};
				}
			}
			param 2 {
		param_NUA3_speed {
			type: int;
			name: string(STR_PARAM_NUA3_SPEED_NAME);
			desc: string(STR_PARAM_NUA3_SPEED_DESC);
			min_value: 29;
			max_value: 255;
			def_value: 91;
			names: {
				29: string(STR_STRING_UNLIMITED);
					};
				}
			}
		}

if (ttd_platform != PLATFORM_OPENTTD || (openttd_version < version_openttd(1, 13, 0, 0))) {
		error(FATAL, REQUIRES_OPENTTD, string(STR_OPENTTD_VERSION));
	}

//==================================================================================================================================
//								PARAMETR
//==================================================================================================================================
if (((grf_future_status("UFI\88"))&&(param["UFI\88", 0] == 0)) || ((grf_future_status("UFI\89"))&&(param["UFI\89", 0] == 0))) {param[0] = 0;}
if (((grf_future_status("UFI\88"))&&(param["UFI\88", 0] == 1)) || ((grf_future_status("UFI\89"))&&(param["UFI\89", 0] == 1))) {param[0] = 1;}
if (((grf_future_status("UFI\88"))&&(param["UFI\88", 0] == 2)) || ((grf_future_status("UFI\89"))&&(param["UFI\89", 0] == 2))) {param[0] = 2;}

if ((param[1]  < 29) || (param[1]  > 255)) { param[1]  = 61; }
if ((param[2]  < 29) || (param[2]  > 255)) { param[2]  = 91; }
//==================================================================================================================================
//								Templates
//==================================================================================================================================
template ground_tile(x, y) { [x, y, 64, 31, -31, 0] }
template tmpl_underlay_overlay_straight(y) {
    ground_tile(  1,  y)
    ground_tile( 70,  y)
}
template tmpl_underlay_overlay_junctions(y) {
    ground_tile(139,  y)
    ground_tile(208,  y)
    ground_tile(277,  y)
    ground_tile(346,  y)
    ground_tile(415,  y)
}
template tmpl_underlay_overlay_corners(y) {
    ground_tile(484,  y)
    ground_tile(553,  y)
    ground_tile(622,  y)
    ground_tile(691,  y)
}
template tmpl_underlay_overlay_slope(y) {
    [    1,   y+36,   64,   39,   -31,   -8]
    [   70,   y+36,   64,   23,   -31,    0]
    [  139,   y+36,   64,   23,   -31,    0]
    [  208,   y+36,   64,   39,   -31,   -8]
}
template tmpl_underlay_overlay_half_tiles(y) {
    ground_tile(277, y+36)
    ground_tile(346, y+36)
    ground_tile(415, y+36)
    ground_tile(484, y+36)
}
template tmpl_underlay_overlay(y) {
    tmpl_underlay_overlay_straight(y)
    tmpl_underlay_overlay_junctions(y)
    tmpl_underlay_overlay_corners(y)
    tmpl_underlay_overlay_slope(y)
    tmpl_underlay_overlay_half_tiles(y)
}

template tmpl_bridge_straight(x) {
    ground_tile(  1+x, 401)
    ground_tile( 70+x, 401)
}
template tmpl_bridge_slope(x) {
    [  139+x,  401,   64,   39,   -31,   -8]
    [  208+x,  401,   64,   23,   -31,    0]
    [  277+x,  401,   64,   23,   -31,    0]
    [  346+x,  401,   64,   39,   -31,   -8]
}
template tmpl_bridge_surfaces(x) {
    tmpl_bridge_straight(x)
    tmpl_bridge_slope(x)
}

template tmpl_depot(x) {
    [    1+x,  445,   64,   61,   -31,  -30]
    [   70+x,  445,   64,   61,    -1,  -45]
    [  139+x,  445,   64,   61,   -31,  -30]
    [  208+x,  445,   64,   61,   -61,  -45]
    [  277+x,  445,   64,   61,   -61,  -45]
    [  346+x,  445,   64,   61,    -1,  -45]
}

template tmpl_tunnels(x, y) {
    ground_tile(  1+x, 583+y)
    ground_tile( 70+x, 583+y)
    ground_tile(139+x, 583+y)
    ground_tile(208+x, 583+y)
}

template tmpl_gui_icon(x, y) { [x, y, 20, 20, 0, 0]
}
template tmpl_gui_cursor(x, y) { [x, y, 32, 32, 0, 0]
}
template tmpl_gui_gfx() {
    tmpl_gui_icon(  1, 700)
    tmpl_gui_icon( 22, 700)
    tmpl_gui_icon( 43, 700)
    tmpl_gui_icon( 64, 700)
    tmpl_gui_icon( 85, 700)
    tmpl_gui_icon(127, 700)

    tmpl_gui_cursor(  1, 721)
    tmpl_gui_cursor( 34, 721)
    tmpl_gui_cursor( 67, 721)
    tmpl_gui_cursor(100, 721)
    tmpl_gui_cursor(133, 721)
    tmpl_gui_cursor(166, 721)
}

template tmpl_gui_ttd() {
    tmpl_gui_icon(  1, 700)
    tmpl_gui_icon( 22, 700)
    tmpl_gui_icon( 43, 700)
    tmpl_gui_icon( 64, 700)
    tmpl_gui_icon( 85, 700)
    tmpl_gui_icon(106, 700)

    [    1,  754,   64,   36,  -18,  -8]
	[   66,  754,   62,   36,  -16,  -8]
	[  129,  754,   56,   36,    0,   0]
    tmpl_gui_cursor(186, 754)
    tmpl_gui_cursor(219, 754)
    tmpl_gui_cursor(252, 754)
}

template tmpl_UGUI_icon(x, y) { [x, y, 33, 33, 0, 0] }
template tmpl_UGUI_cursor(x, y) { [x, y, 30, 36, 0, 0] }
template tmpl_gui_UGUI() {
    tmpl_UGUI_icon(  1, 791)
    tmpl_UGUI_icon( 35, 791)
    tmpl_UGUI_icon( 69, 791)
    tmpl_UGUI_icon(103, 791)
    tmpl_UGUI_icon(137, 791)
    tmpl_UGUI_icon(171, 791)

    tmpl_UGUI_cursor(  1, 825)
    tmpl_UGUI_cursor( 32, 825)
    tmpl_UGUI_cursor( 63, 825)
    tmpl_UGUI_cursor( 94, 825)
    tmpl_UGUI_cursor(125, 825)
    tmpl_UGUI_cursor(156, 825)
}
//==================================================================================================================================
//								SPRITES
//==================================================================================================================================
//===========================================================
//					MODERN TRAM TRACK (RAIL)
//===========================================================
spriteset(RAIL_underlay_0, "gfx/T_RAIL.png") {
    tmpl_underlay_overlay(1)
}
spriteset(RAIL_snow_underlay_0, "gfx/T_RAIL.png") {
    tmpl_underlay_overlay(81)
}
spriteset(RAIL_underlay_1, "gfx/T_RAIL.png") {
    tmpl_underlay_overlay(161)
}
spriteset(RAIL_snow_underlay_1, "gfx/T_RAIL.png") {
    tmpl_underlay_overlay(241)
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_underlay_0, terrain_type) {							//UNDERLAY
    TILETYPE_SNOW: RAIL_snow_underlay_0;
    RAIL_underlay_0;
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_underlay_1, terrain_type) {							//UNDERLAY
    TILETYPE_SNOW: RAIL_snow_underlay_1;
    RAIL_underlay_1;
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_underlay, town_zone) {									//TOWN ZONE
	TOWNZONE_EDGE: switch_RAIL_underlay_0;
	switch_RAIL_underlay_1;
}

spriteset(RAIL_bridge, "gfx/T_RAIL.png") {
    tmpl_bridge_surfaces(0)
}
spriteset(RAIL_snow_bridge, "gfx/T_RAIL.png") {
    tmpl_bridge_surfaces(414)
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_bridge, terrain_type) {								//BRIDGE
    TILETYPE_SNOW: RAIL_snow_bridge;
    RAIL_bridge;
}

spriteset(normal_RAIL_tunnels, "gfx/T_RAIL.png") {
    tmpl_tunnels(0,0)
}
spriteset(snow_RAIL_tunnels, "gfx/T_RAIL.png") {
    tmpl_tunnels(276,0)
}
spriteset(normal_RAIL_tunnels_1, "gfx/T_RAIL.png") {
    tmpl_tunnels(0,36)
}
spriteset(snow_RAIL_tunnels_1, "gfx/T_RAIL.png") {
    tmpl_tunnels(276,36)
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_tunnels_0, terrain_type) {
    TILETYPE_SNOW: snow_RAIL_tunnels;
    normal_RAIL_tunnels;
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_tunnels_1, terrain_type) {
    TILETYPE_SNOW: snow_RAIL_tunnels_1;
    normal_RAIL_tunnels_1;
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_tunnels, town_zone) {									//TUNNELS
	TOWNZONE_EDGE: switch_RAIL_tunnels_0;
	switch_RAIL_tunnels_1;
}
//===========================================================
//					METRO LINE (NAA3)
//===========================================================
spriteset(switch_NAA3_overlay, "gfx/T_NAA3.png") {									            //OVERLAY
    tmpl_underlay_overlay(321)
}

spriteset(NAA3_depots, "gfx/T_NAA3.png") {
    tmpl_depot(0)
}
spriteset(NAA3_snow_depots, "gfx/T_NAA3.png") {
    tmpl_depot(414)
}
switch(FEAT_TRAMTYPES, SELF, switch_NAA3_depots, terrain_type) {						        //DEPOT
    TILETYPE_SNOW: NAA3_snow_depots;
    NAA3_depots;
}

spriteset(NAA3_gui_UGUI, "gfx/T_NAA3.png") {
    tmpl_gui_UGUI()
}
spriteset(NAA3_gui_opengfx, "gfx/T_NAA3.png") {
    tmpl_gui_gfx()
}
spriteset(NAA3_gui_ttd, "gfx/T_NAA3.png") {
    tmpl_gui_ttd()
}
switch (FEAT_TRAMTYPES, SELF, switch_NAA3_gui, param_gui) {								        //GUI
    1: NAA3_gui_opengfx;
    2: NAA3_gui_UGUI;
    NAA3_gui_ttd;
}
//===========================================================
//					NUAE
//===========================================================
spriteset(NUAE_underlay, "gfx/T_NUAE.png") {
    tmpl_underlay_overlay(1)
}
spriteset(NUAE_snow_underlay, "gfx/T_NUAE.png") {
    tmpl_underlay_overlay(81)
}
switch(FEAT_TRAMTYPES, SELF, switch_NUAE_underlay, terrain_type) {								//UNDERLAY
    TILETYPE_SNOW: NUAE_snow_underlay;
    NUAE_underlay;
}

spriteset(NUAE_bridge, "gfx/T_NUAE.png") {
    tmpl_bridge_surfaces(0)
}
spriteset(NUAE_snow_bridge, "gfx/T_NUAE.png") {
    tmpl_bridge_surfaces(414)
}
switch(FEAT_TRAMTYPES, SELF, switch_NUAE_bridge, terrain_type) {								//BRIDGE
    TILETYPE_SNOW: NUAE_snow_bridge;
    NUAE_bridge;
}

spriteset(normal_NUAE_tunnels, "gfx/T_NUAE.png") {
    tmpl_tunnels(0,0)
}
spriteset(snow_NUAE_tunnels, "gfx/T_NUAE.png") {
    tmpl_tunnels(276,0)
}
switch(FEAT_TRAMTYPES, SELF, switch_NUAE_tunnels, terrain_type) {								//TUNNELS
    TILETYPE_SNOW: snow_NUAE_tunnels;
    normal_NUAE_tunnels;
}
//===========================================================
//					METRO LINE (NUA3)
//===========================================================
spriteset(switch_NUA3_overlay, "gfx/T_NUA3.png") {										        //OVERLAY
    tmpl_underlay_overlay(321)
}

spriteset(NUA3_depots, "gfx/T_NUA3.png") {
    tmpl_depot(0)
}
spriteset(NUA3_snow_depots, "gfx/T_NUA3.png") {
    tmpl_depot(414)
}
switch(FEAT_TRAMTYPES, SELF, switch_NUA3_depots, terrain_type) {						        //DEPOT
    TILETYPE_SNOW: NUA3_snow_depots;
    NUA3_depots;
}

spriteset(NUA3_gui_UGUI, "gfx/T_NAA3.png") {
    tmpl_gui_UGUI()
}
spriteset(NUA3_gui_opengfx, "gfx/T_NUA3.png") {
    tmpl_gui_gfx()
}
spriteset(NUA3_gui_ttd, "gfx/T_NUA3.png") {
    tmpl_gui_ttd()
}
switch (FEAT_TRAMTYPES, SELF, switch_NUA3_gui, param_gui) {							            //GUI
    1: NUA3_gui_opengfx;
    2: NUA3_gui_UGUI;
    NUA3_gui_ttd;
}
//==================================================================================================================================
//									TRAMWAY Definitions
//==================================================================================================================================
//===========================================================
//					METRO LINE (NAA3)
//===========================================================
if (tramtype_available("NAA3") || loading_stage == LOADING_STAGE_RESERVE) {	
	item(FEAT_TRAMTYPES, NAA3_tram, 45) {
		property {
			label:							"NAA3";
			name: 							string(STR_STRING_2, string(STR_NAME_NAA3), string(STR_3RD_POWERED));
			toolbar_caption: 				string(STR_STRING_2, string(STR_TOOLBAR_CAPTION_TRAM), string(STR_CONSTRUCTION));
			build_window_caption: 			string(STR_BUILD_WINDOW_CAPTION_3RDR);
			autoreplace_text: 				string(STR_AUTOREPLACE_3RDR);
			new_engine_text: 				string(STR_NEW_ENGINE_3RDR);
			tramtype_flags:					bitmask(TRAMTYPE_FLAG_NO_LEVEL_CROSSING);
			powered_tramtype_list: 			["NAA3", "NUA3"];
			alternative_tramtype_list:		["NAA3", "NUA3"];
			speed_limit:					(param_NAA3_speed == 29) ? 0 : (param_NAA3_speed) km/h;
			construction_cost: 				14;
			maintenance_cost:				14;
			sort_order: 					10;
			}
	if (param["UFI\89", 9] == 1) {
		property {
			menu_text: 						string(STR_STRING_4, string(STR_NAME_NAA3), string(STR_CONSTRUCTION), string(STR_3RD_POWERED), string(STR_TRAIN));
				}
			} else {
		property {
			menu_text: 						string(STR_STRING_4, string(STR_NAME_NAA3), string(STR_CONSTRUCTION), string(STR_3RD_POWERED), string(STR_WHITE));
				}
			}
		graphics {
				track_overlay: 			    switch_NAA3_overlay;
				underlay: 				    switch_RAIL_underlay;
				depots: 				    switch_NAA3_depots;
				bridge_surfaces: 		    switch_RAIL_bridge;
                tunnels:                    switch_RAIL_tunnels;
				gui: 					    switch_NAA3_gui;
			}
		}
	}
//===========================================================
//				URBAN METRO LINE (NUA3)
//===========================================================
if (tramtype_available("NUA3") || loading_stage == LOADING_STAGE_RESERVE) {	
	item(FEAT_TRAMTYPES, NUA3_tram, 46) {
		property {
			label:							"NUA3";
			name: 							string(STR_STRING_2, string(STR_NAME_NUA3), string(STR_3RD_POWERED));
			toolbar_caption: 				string(STR_STRING_2, string(STR_TOOLBAR_CAPTION_TRAM), string(STR_CONSTRUCTION));
			build_window_caption: 			string(STR_BUILD_WINDOW_CAPTION_3RDR);
			autoreplace_text: 				string(STR_AUTOREPLACE_3RDR);
			new_engine_text: 				string(STR_NEW_ENGINE_3RDR);
			tramtype_flags:					bitmask(TRAMTYPE_FLAG_NO_LEVEL_CROSSING);
			powered_tramtype_list: 			["NAA3", "NUA3"];
			alternative_tramtype_list:		["NAA3", "NUA3"];
			introduction_date:				date(1960,01,01);
			requires_tramtype_list:			["NAA3"];
			speed_limit:					(param_NUA3_speed == 29) ? 0 : (param_NUA3_speed) km/h;
			construction_cost: 				24;
			maintenance_cost:				24;
			sort_order: 					11;
			}
	if (param["UFI\89", 9] == 1) {
		property {
			menu_text: 						string(STR_STRING_4, string(STR_NAME_NUA3), string(STR_CONSTRUCTION), string(STR_3RD_POWERED), string(STR_TRAIN));
				}
			} else {
		property {
			menu_text: 						string(STR_STRING_4, string(STR_NAME_NUA3), string(STR_CONSTRUCTION), string(STR_3RD_POWERED), string(STR_WHITE));
				}
			}
		graphics {
			track_overlay: 			        switch_NUA3_overlay;
			underlay: 				        switch_NUAE_underlay;
			depots: 				        switch_NUA3_depots;
			bridge_surfaces: 		        switch_NUAE_bridge;
            tunnels:                        switch_NUAE_tunnels;
			gui: 					        switch_NUA3_gui;
			}
		}
	}